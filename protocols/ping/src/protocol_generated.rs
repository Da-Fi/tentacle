// automatically generated by the FlatBuffers compiler, do not modify


pub mod p2p {
  #![allow(dead_code)]
  #![allow(unused_imports)]

  use std::mem;
  use std::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::EndianScalar;
pub mod ping {
  #![allow(dead_code)]
  #![allow(unused_imports)]

  use std::mem;
  use std::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::EndianScalar;

#[allow(non_camel_case_types)]
#[repr(u8)]
#[derive(Clone, Copy, PartialEq, Debug)]
pub enum PingPayload {
  NONE = 0,
  Ping = 1,
  Pong = 2,

}

const ENUM_MIN_PING_PAYLOAD: u8 = 0;
const ENUM_MAX_PING_PAYLOAD: u8 = 2;

impl<'a> flatbuffers::Follow<'a> for PingPayload {
  type Inner = Self;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::read_scalar_at::<Self>(buf, loc)
  }
}

impl flatbuffers::EndianScalar for PingPayload {
  #[inline]
  fn to_little_endian(self) -> Self {
    let n = u8::to_le(self as u8);
    let p = &n as *const u8 as *const PingPayload;
    unsafe { *p }
  }
  #[inline]
  fn from_little_endian(self) -> Self {
    let n = u8::from_le(self as u8);
    let p = &n as *const u8 as *const PingPayload;
    unsafe { *p }
  }
}

impl flatbuffers::Push for PingPayload {
    type Output = PingPayload;
    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        flatbuffers::emplace_scalar::<PingPayload>(dst, *self);
    }
}

#[allow(non_camel_case_types)]
const ENUM_VALUES_PING_PAYLOAD:[PingPayload; 3] = [
  PingPayload::NONE,
  PingPayload::Ping,
  PingPayload::Pong
];

#[allow(non_camel_case_types)]
const ENUM_NAMES_PING_PAYLOAD:[&'static str; 3] = [
    "NONE",
    "Ping",
    "Pong"
];

pub fn enum_name_ping_payload(e: PingPayload) -> &'static str {
  let index: usize = e as usize;
  ENUM_NAMES_PING_PAYLOAD[index]
}

pub struct PingPayloadUnionTableOffset {}
pub enum PingMessageOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct PingMessage<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for PingMessage<'a> {
    type Inner = PingMessage<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> PingMessage<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        PingMessage {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args PingMessageArgs) -> flatbuffers::WIPOffset<PingMessage<'bldr>> {
      let mut builder = PingMessageBuilder::new(_fbb);
      if let Some(x) = args.payload { builder.add_payload(x); }
      builder.add_payload_type(args.payload_type);
      builder.finish()
    }

    pub const VT_PAYLOAD_TYPE: flatbuffers::VOffsetT = 4;
    pub const VT_PAYLOAD: flatbuffers::VOffsetT = 6;

  #[inline]
  pub fn payload_type(&self) -> PingPayload {
    self._tab.get::<PingPayload>(PingMessage::VT_PAYLOAD_TYPE, Some(PingPayload::NONE)).unwrap()
  }
  #[inline]
  pub fn payload(&self) -> Option<flatbuffers::Table<'a>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Table<'a>>>(PingMessage::VT_PAYLOAD, None)
  }
  #[inline]
  #[allow(non_snake_case)]
  pub fn payload_as_ping(&'a self) -> Option<Ping> {
    if self.payload_type() == PingPayload::Ping {
      self.payload().map(|u| Ping::init_from_table(u))
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn payload_as_pong(&'a self) -> Option<Pong> {
    if self.payload_type() == PingPayload::Pong {
      self.payload().map(|u| Pong::init_from_table(u))
    } else {
      None
    }
  }

}

pub struct PingMessageArgs {
    pub payload_type: PingPayload,
    pub payload: Option<flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>>,
}
impl<'a> Default for PingMessageArgs {
    #[inline]
    fn default() -> Self {
        PingMessageArgs {
            payload_type: PingPayload::NONE,
            payload: None,
        }
    }
}
pub struct PingMessageBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> PingMessageBuilder<'a, 'b> {
  #[inline]
  pub fn add_payload_type(&mut self, payload_type: PingPayload) {
    self.fbb_.push_slot::<PingPayload>(PingMessage::VT_PAYLOAD_TYPE, payload_type, PingPayload::NONE);
  }
  #[inline]
  pub fn add_payload(&mut self, payload: flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PingMessage::VT_PAYLOAD, payload);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> PingMessageBuilder<'a, 'b> {
    let start = _fbb.start_table();
    PingMessageBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<PingMessage<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

pub enum PingOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct Ping<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Ping<'a> {
    type Inner = Ping<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> Ping<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        Ping {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args PingArgs) -> flatbuffers::WIPOffset<Ping<'bldr>> {
      let mut builder = PingBuilder::new(_fbb);
      builder.add_nonce(args.nonce);
      builder.finish()
    }

    pub const VT_NONCE: flatbuffers::VOffsetT = 4;

  #[inline]
  pub fn nonce(&self) -> u32 {
    self._tab.get::<u32>(Ping::VT_NONCE, Some(0)).unwrap()
  }
}

pub struct PingArgs {
    pub nonce: u32,
}
impl<'a> Default for PingArgs {
    #[inline]
    fn default() -> Self {
        PingArgs {
            nonce: 0,
        }
    }
}
pub struct PingBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> PingBuilder<'a, 'b> {
  #[inline]
  pub fn add_nonce(&mut self, nonce: u32) {
    self.fbb_.push_slot::<u32>(Ping::VT_NONCE, nonce, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> PingBuilder<'a, 'b> {
    let start = _fbb.start_table();
    PingBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Ping<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

pub enum PongOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct Pong<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Pong<'a> {
    type Inner = Pong<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> Pong<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        Pong {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args PongArgs) -> flatbuffers::WIPOffset<Pong<'bldr>> {
      let mut builder = PongBuilder::new(_fbb);
      builder.add_nonce(args.nonce);
      builder.finish()
    }

    pub const VT_NONCE: flatbuffers::VOffsetT = 4;

  #[inline]
  pub fn nonce(&self) -> u32 {
    self._tab.get::<u32>(Pong::VT_NONCE, Some(0)).unwrap()
  }
}

pub struct PongArgs {
    pub nonce: u32,
}
impl<'a> Default for PongArgs {
    #[inline]
    fn default() -> Self {
        PongArgs {
            nonce: 0,
        }
    }
}
pub struct PongBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> PongBuilder<'a, 'b> {
  #[inline]
  pub fn add_nonce(&mut self, nonce: u32) {
    self.fbb_.push_slot::<u32>(Pong::VT_NONCE, nonce, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> PongBuilder<'a, 'b> {
    let start = _fbb.start_table();
    PongBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Pong<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

}  // pub mod Ping
}  // pub mod P2P

