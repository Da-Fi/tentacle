// automatically generated by the FlatBuffers compiler, do not modify



use std::mem;
use std::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::EndianScalar;

#[allow(unused_imports, dead_code)]
pub mod p2p {

  use std::mem;
  use std::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::EndianScalar;
#[allow(unused_imports, dead_code)]
pub mod identify {

  use std::mem;
  use std::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::EndianScalar;

pub enum AddressOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct Address<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Address<'a> {
    type Inner = Address<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> Address<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        Address {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args AddressArgs<'args>) -> flatbuffers::WIPOffset<Address<'bldr>> {
      let mut builder = AddressBuilder::new(_fbb);
      if let Some(x) = args.bytes { builder.add_bytes(x); }
      builder.finish()
    }

    pub const VT_BYTES: flatbuffers::VOffsetT = 4;

  #[inline]
  pub fn bytes(&self) -> Option<&'a [u8]> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(Address::VT_BYTES, None).map(|v| v.safe_slice())
  }
}

pub struct AddressArgs<'a> {
    pub bytes: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a ,  u8>>>,
}
impl<'a> Default for AddressArgs<'a> {
    #[inline]
    fn default() -> Self {
        AddressArgs {
            bytes: None,
        }
    }
}
pub struct AddressBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> AddressBuilder<'a, 'b> {
  #[inline]
  pub fn add_bytes(&mut self, bytes: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Address::VT_BYTES, bytes);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> AddressBuilder<'a, 'b> {
    let start = _fbb.start_table();
    AddressBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Address<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

pub enum IdentifyMessageOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct IdentifyMessage<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for IdentifyMessage<'a> {
    type Inner = IdentifyMessage<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> IdentifyMessage<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        IdentifyMessage {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args IdentifyMessageArgs<'args>) -> flatbuffers::WIPOffset<IdentifyMessage<'bldr>> {
      let mut builder = IdentifyMessageBuilder::new(_fbb);
      if let Some(x) = args.identify { builder.add_identify(x); }
      if let Some(x) = args.observed_addr { builder.add_observed_addr(x); }
      if let Some(x) = args.listen_addrs { builder.add_listen_addrs(x); }
      builder.finish()
    }

    pub const VT_LISTEN_ADDRS: flatbuffers::VOffsetT = 4;
    pub const VT_OBSERVED_ADDR: flatbuffers::VOffsetT = 6;
    pub const VT_IDENTIFY: flatbuffers::VOffsetT = 8;

  #[inline]
  pub fn listen_addrs(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Address<'a>>>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<flatbuffers::ForwardsUOffset<Address<'a>>>>>(IdentifyMessage::VT_LISTEN_ADDRS, None)
  }
  #[inline]
  pub fn observed_addr(&self) -> Option<Address<'a>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<Address<'a>>>(IdentifyMessage::VT_OBSERVED_ADDR, None)
  }
  #[inline]
  pub fn identify(&self) -> Option<&'a [u8]> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(IdentifyMessage::VT_IDENTIFY, None).map(|v| v.safe_slice())
  }
}

pub struct IdentifyMessageArgs<'a> {
    pub listen_addrs: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a , flatbuffers::ForwardsUOffset<Address<'a >>>>>,
    pub observed_addr: Option<flatbuffers::WIPOffset<Address<'a >>>,
    pub identify: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a ,  u8>>>,
}
impl<'a> Default for IdentifyMessageArgs<'a> {
    #[inline]
    fn default() -> Self {
        IdentifyMessageArgs {
            listen_addrs: None,
            observed_addr: None,
            identify: None,
        }
    }
}
pub struct IdentifyMessageBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> IdentifyMessageBuilder<'a, 'b> {
  #[inline]
  pub fn add_listen_addrs(&mut self, listen_addrs: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<Address<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(IdentifyMessage::VT_LISTEN_ADDRS, listen_addrs);
  }
  #[inline]
  pub fn add_observed_addr(&mut self, observed_addr: flatbuffers::WIPOffset<Address<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<Address>>(IdentifyMessage::VT_OBSERVED_ADDR, observed_addr);
  }
  #[inline]
  pub fn add_identify(&mut self, identify: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(IdentifyMessage::VT_IDENTIFY, identify);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> IdentifyMessageBuilder<'a, 'b> {
    let start = _fbb.start_table();
    IdentifyMessageBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<IdentifyMessage<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

}  // pub mod Identify
}  // pub mod P2P

